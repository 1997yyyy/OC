1) Что такое ООП?
Объектно-ориентированное программирование (ООП) — парадигма, в которой основными строительными блоками являются объекты. Каждый объект объединяет данные (состояние) и методы (поведение). Основные принципы:

Инкапсуляция: сокрытие данных за интерфейсом.

Абстракция: выделение существенного, игнорируя детали.

Наследование: создание новых классов на основе существующих для повторного использования кода.

Полиморфизм: возможность разных объектов реагировать на одни и те же сообщения через единый интерфейс.

2) Магическое число 7 Миллера – 7 примеров из IT
Главное меню: ограничение пунктов (5–9) для удобной навигации.

Панель инструментов: группировка до 7–9 кнопок для восприятия.

Пагинация: отображение 7 страниц, остальные — сокращённо.

История документов: список из 7 последних элементов для быстрого доступа.

Списки выбора: опции в мобильных приложениях ограничены 7 пунктами.

Вложенность меню: не более 7 уровней для ясной иерархии.

Дашборды: до 7 информационных блоков для оптимальной визуализации.

3) Энтропия ПО – 5 негэнтропийных мер
Рефакторинг: регулярное улучшение и упрощение кода.

Автоматизированное тестирование: своевременное обнаружение ошибок.

Код-ревью: соблюдение стандартов и повышение качества.

Непрерывная интеграция/развертывание (CI/CD): автоматизация сборок и проверок.

Принципы SOLID и паттерны проектирования: структурирование кода для снижения взаимозависимостей.

4) 5 признаков сложной системы по Гради Бучу с примерами
Масштабность:

Проект с 15+ классами (например, система управления обучением).

CRM-система, разделённая на микросервисы (клиенты, продажи, аналитика).

Высокая связанность:

Изменение модуля аутентификации вызывает сбои в системе сессий и профилей.

В блого-системе изменение БД затрагивает серверную и клиентскую части.

Эмерджентное поведение:

В симуляции сетевых протоколов возникают неожиданные устойчивые паттерны нагрузки.

В игровом движке сочетание модулей физики и рендеринга генерирует непредвиденные эффекты.

Динамичность изменений:

Веб-приложение, требующее постоянного рефакторинга вслед за изменяющимися требованиями.

Система управления задачами, эволюционирующая через добавление новых модулей (отчёты, уведомления).

Обратная связь между компонентами:

Изменение алгоритма мониторинга сразу отражается на визуализации данных в реальном времени.

В системе рекомендаций корректировка фильтрации данных влияет на расчёт рекомендаций в других модулях.

5) Закон иерархических компенсаций Седова – 5 исторических примеров
От ассемблера к языкам высокого уровня: компенсация низкой читаемости и высокой подверженности ошибкам.

Переход к объектно-ориентированному программированию: решение проблем масштабируемости процедурного кода.

Модульная архитектура и паттерны: разбиение монолитов на модули для лучшей управляемости.

Унификация протоколов TCP/IP: замена разрозненной системы сетевого общения единой моделью.

Виртуализация и облачные вычисления: компенсация ограничений физического оборудования через абстракцию ресурсов.
